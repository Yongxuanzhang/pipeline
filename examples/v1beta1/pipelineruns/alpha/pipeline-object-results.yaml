apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: pipelinerun-object-results
spec:
  pipelineSpec:
    tasks:
      - name: task1
        taskSpec:
          results:
            - name: object-results
              type: object
              description: The object results
              properties:
                foo:
                  type: string
                hello:
                  type: string
          steps:
            - name: write-object
              image: bash:latest
              script: |
                #!/usr/bin/env bash
                echo -n "{\"foo\":\"bar\",\"hello\":\"world\"}" | tee $(results.object-results.path)
      - name: task2
        params:
          - name: whole-object
            value: "$(tasks.task1.results.object-results[*])"
          - name: object-element
            value: "$(tasks.task1.results.object-results.hello)"
        taskSpec:
          params:
            - name: whole-object
              type: object
              properties:
                foo:
                  type: string
                hello:
                  type: string
              default: {
                hello: "",
                foo: "",
              }
            - name: object-element
              type: string
              default: "defaultparam1"
          steps:
            - name: print-object-foo
              image: bash:latest
              args: [
                "echo",
                "$(params.whole-object.foo)"
              ]
            - name: print-object-hello
              image: ubuntu
              script: |
                #!/bin/bash
                VALUE=$(params.object-element)
                EXPECTED="world"
                diff=$(diff <(printf "%s\n" "${VALUE[@]}") <(printf "%s\n" "${EXPECTED[@]}"))
                if [[ -z "$diff" ]]; then
                    echo "Get expected: ${VALUE}"
                    exit 0
                else
                    echo "Want: ${EXPECTED} Got: ${VALUE}"
                    exit 1
                fi
